datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    firstName   String
    lastName    String
    email       String      @unique
    phoneNumber String?
    password    String
    roleId      String      @db.ObjectId
    role        Role        @relation(fields: [roleId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    updatedBy   String?
    accessTokens AccessToken[]
}

model Role {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    rolePermissions RolePermission[]
    users       User[]
    createdAt   DateTime    @default(now())
    createdBy   String?
    updatedBy   String?
}

model Permission {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    rolePermissions RolePermission[]
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    createdBy   String?
    updatedBy   String?
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    content   String?
    published Boolean  @default(false)
    authorId  String   @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model RolePermission {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId
    roleId         String      @db.ObjectId
    permissionId   String      @db.ObjectId
    role           Role        @relation(fields: [roleId], references: [id])
    permission     Permission  @relation(fields: [permissionId], references: [id])
    createdAt      DateTime    @default(now())
    updatedAt      DateTime    @updatedAt
}

model AccessToken {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    token       String      @unique
    userId      String      @db.ObjectId
    expiresAt   DateTime
    user        User        @relation(fields: [userId], references: [id])
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}